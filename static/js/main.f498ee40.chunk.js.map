{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/NewMovie/validateNewMovie.js","utils/validation.js","components/constants.js","components/NewMovie/constants.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","validateNewMovie","newMovie","errorsEntries","Object","entries","name","value","error","requiredValidator","isItUrl","pattern","RegExp","test","urlValidator","hasErrors","some","errors","reduce","acc","movieConfig","initialValues","initialErrors","NewMovie","state","values","changeHandler","target","setState","prevState","onAdd","event","preventDefault","onSubmit","props","this","Form","TextArea","label","placeholder","onChange","Label","basic","color","pointing","size","Input","type","Button","primary","Component","App","moviesFromServer","addMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f498ee40.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import { requiredValidator, urlValidator } from '../../utils';\n\nexport function validateNewMovie(newMovie) {\n  const errorsEntries = Object.entries(newMovie).map(([name, value]) => {\n    let error = requiredValidator(name, value);\n\n    if (!error && (name === 'imgUrl' || name === 'imdbUrl')) {\n      error = urlValidator(name, value);\n    }\n\n    return [name, error];\n  });\n\n  const hasErrors = errorsEntries.some(([, error]) => !!error);\n\n  const errors = errorsEntries.reduce((acc, [name, error]) => {\n    return {\n      ...acc,\n      [name]: error,\n    };\n  }, {});\n\n  return {\n    errors,\n    hasErrors,\n  };\n}\n","export function requiredValidator(name, value) {\n  return value || name === 'description'\n    ? null\n    : `Field ${name} is required`;\n}\n\nexport function urlValidator(name, value) {\n  let isItUrl = false;\n  const pattern = new RegExp('^(https?:\\\\/\\\\/)?'\n  + '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|'\n  + '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'\n  + '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'\n  + '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'\n  + '(\\\\#[-a-z\\\\d_]*)?$', 'i');\n\n  if (value) {\n    isItUrl = !!pattern.test(value);\n  }\n\n  return isItUrl\n    ? null\n    : `Field ${name} should be a link`;\n}\n","export const movieConfig = [\n  'title',\n  'description',\n  'imgUrl',\n  'imdbUrl',\n  'imdbId',\n];\n","import { movieConfig } from '../constants';\n\nexport const initialValues = movieConfig.reduce((acc, name) => {\n  return {\n    ...acc,\n    [name]: '',\n  };\n}, {});\n\nexport const initialErrors = movieConfig.reduce((acc, name) => {\n  return {\n    ...acc,\n    [name]: null,\n  };\n}, {});\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Label } from 'semantic-ui-react';\nimport './NewMovie.scss';\nimport { validateNewMovie } from './validateNewMovie';\nimport { initialValues, initialErrors } from './constants';\nimport { movieConfig } from '../constants';\n\nexport class NewMovie extends Component {\n  state = {\n    values: initialValues,\n    errors: initialErrors,\n  };\n\n  changeHandler = ({ target }) => {\n    this.setState(prevState => ({\n      values: {\n        ...prevState.values,\n        [target.name]: target.value,\n      },\n    }));\n  }\n\n  onAdd = (event) => {\n    event.preventDefault();\n    const { onSubmit } = this.props;\n\n    this.setState((prevState) => {\n      const {\n        errors,\n        hasErrors,\n      } = validateNewMovie(prevState.values);\n\n      if (hasErrors) {\n        return {\n          errors,\n        };\n      }\n\n      onSubmit(prevState.values);\n\n      return {\n        errors,\n        values: initialValues,\n      };\n    });\n  };\n\n  render() {\n    const { values, errors } = this.state;\n\n    return (\n      <Form onSubmit={this.onAdd} name=\"newMovie\">\n        {movieConfig.map((name) => {\n          if (name === 'description') {\n            return (\n              <div\n                key={name}\n                className={`field ${errors[name] ? 'error' : ''}`}\n              >\n                <Form.TextArea\n                  label={name}\n                  placeholder={`${name}...`}\n                  onChange={this.changeHandler}\n                  name={name}\n                  value={values[name]}\n                />\n              </div>\n            );\n          }\n\n          return (\n            <div key={name} className={`field ${errors[name] ? 'error' : ''}`}>\n              {errors[name] && (\n                <Label\n                  basic\n                  color=\"red\"\n                  pointing=\"below\"\n                  size=\"small\"\n                >\n                  {errors[name]}\n                </Label>\n              )}\n              <Form.Input\n                label={name}\n                type=\"text\"\n                placeholder={`${name}...`}\n                onChange={this.changeHandler}\n                name={name}\n                value={values[name]}\n              />\n            </div>\n          );\n        })}\n        <Form.Button primary>Add</Form.Button>\n      </Form>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.scss';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie) => {\n    this.setState(prevState => ({\n      movies: [\n        ...prevState.movies,\n        {\n          ...movie,\n        },\n      ],\n    }));\n  }\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie onSubmit={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}